From 13a7373112a8b26de79fb34c59e3f54af0b84200 Mon Sep 17 00:00:00 2001
From: jonudewux <jonudewux@stromox.com>
Date: Wed, 22 Feb 2017 21:30:15 +0200
Subject: [PATCH 2/3] Revert "simplify CHTSPVFS drastically by removing the
 intermediate"

This reverts commit 241d8acff4785c3f9668c6fe81d80168b40bf8d2.
---
 CMakeLists.txt     |   2 +
 src/CircBuffer.cpp | 143 +++++++++++++++++++++++++++++++++++++++++++++++++++++
 src/CircBuffer.h   |  55 +++++++++++++++++++++
 src/HTSPVFS.cpp    | 132 +++++++++++++++++++++++++++++++++++++++----------
 src/Tvheadend.h    |  17 ++++++-
 5 files changed, 322 insertions(+), 27 deletions(-)
 create mode 100644 src/CircBuffer.cpp
 create mode 100644 src/CircBuffer.h

diff --git a/CMakeLists.txt b/CMakeLists.txt
index c22ee71..7dbe1ee 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -18,6 +18,8 @@ add_definitions(-DUSE_DEMUX)
 # Sources and headers
 set(HTS_SOURCES src/client.h
                 src/client.cpp
+                src/CircBuffer.cpp
+                src/CircBuffer.h
                 src/HTSPConnection.cpp
                 src/HTSPDemuxer.cpp
                 src/HTSPTypes.h
diff --git a/src/CircBuffer.cpp b/src/CircBuffer.cpp
new file mode 100644
index 0000000..bd2a9c1
--- /dev/null
+++ b/src/CircBuffer.cpp
@@ -0,0 +1,143 @@
+/*
+ *      Copyright (C) 2005-2012 Team XBMC
+ *      http://www.xbmc.org
+ *
+ *  This Program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2, or (at your option)
+ *  any later version.
+ *
+ *  This Program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with XBMC; see the file COPYING.  If not, write to
+ *  the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
+ *  http://www.gnu.org/copyleft/gpl.html
+ *
+ */
+
+#include "CircBuffer.h"
+#include <string.h>
+#include <stdlib.h>
+#include <stdio.h>
+
+using namespace P8PLATFORM;
+
+CCircBuffer::CCircBuffer(void)
+  : m_buffer(NULL), m_alloc(0), m_size(0), m_count(0), m_pin(0), m_pout(0)
+{
+}
+
+CCircBuffer::~CCircBuffer(void)
+{
+  unalloc();
+}
+
+void CCircBuffer::alloc(size_t size)
+{
+  if (size > m_alloc) {
+    m_alloc  = size;
+
+    // don't allow memory to leak on realloc failure
+    unsigned char * buffer = (unsigned char*) realloc(m_buffer, size);
+
+    if (!buffer)
+      ::free(m_buffer);
+    else
+      m_buffer = buffer;
+  }
+  m_size = size;
+  reset();
+}
+
+void CCircBuffer::unalloc(void)
+{
+  if(m_buffer)
+    ::free(m_buffer);
+
+  m_buffer = NULL;
+  m_alloc  = 0;
+  m_size   = 0;
+  reset();
+}
+
+void CCircBuffer::reset(void)
+{
+  CLockObject lock(m_mutex);
+  m_pin   = 0;
+  m_pout  = 0;
+  m_count = 0;
+}
+
+size_t CCircBuffer::size(void) const
+{
+  CLockObject lock(m_mutex);
+  return m_size;
+}
+
+size_t CCircBuffer::avail(void) const
+{
+  CLockObject lock(m_mutex);
+  return m_count;
+}
+
+size_t CCircBuffer::free(void) const
+{
+  CLockObject lock(m_mutex);
+  return m_size - m_count - 1;
+}
+
+ssize_t CCircBuffer::write(const unsigned char* data, size_t len)
+{
+  CLockObject lock(m_mutex);
+  if (m_size < 2)
+    return -1;
+  if (len > free())
+    len = free();
+  if (m_pin < m_pout)
+    memcpy(m_buffer+m_pin, data, len);
+  else {
+    size_t pt1, pt2;
+    pt1 = m_size - m_pin;
+    if (len < pt1) {
+      pt1 = len;
+      pt2 = 0;
+    } else {
+      pt2 = len - pt1;
+    }
+    memcpy(m_buffer+m_pin, data, pt1);
+    memcpy(m_buffer, data+pt1, pt2);
+  }
+  m_pin    = (m_pin + len) % m_size;
+  m_count += len;
+  return len;
+}
+
+ssize_t CCircBuffer::read(unsigned char* data, size_t len)
+{
+  CLockObject lock(m_mutex);
+  if (m_size < 2)
+    return -1;
+  if (len > avail())
+    len = avail();
+  if (m_pout < m_pin)
+    memcpy(data, m_buffer+m_pout, len);
+  else {
+    size_t pt1, pt2;
+    pt1 = m_size - m_pout;
+    if (len < pt1) {
+      pt1 = len;
+      pt2 = 0;
+    } else {
+      pt2 = len - pt1;
+    }
+    memcpy(data, m_buffer+m_pout, pt1);
+    memcpy(data+pt1, m_buffer, pt2);
+  }
+  m_pout   = ((m_pout + m_size) + len) % m_size;
+  m_count -= len;
+  return len;
+}
diff --git a/src/CircBuffer.h b/src/CircBuffer.h
new file mode 100644
index 0000000..28ab719
--- /dev/null
+++ b/src/CircBuffer.h
@@ -0,0 +1,55 @@
+#pragma once
+
+/*
+ *      Copyright (C) 2005-2012 Team XBMC
+ *      http://www.xbmc.org
+ *
+ *  This Program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2, or (at your option)
+ *  any later version.
+ *
+ *  This Program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with XBMC; see the file COPYING.  If not, write to
+ *  the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
+ *  http://www.gnu.org/copyleft/gpl.html
+ *
+ */
+
+#include "os.h"
+#include "threads/mutex.h"
+
+class CCircBuffer
+{
+public:
+  CCircBuffer    (void);
+  ~CCircBuffer   (void);
+
+  void    alloc   (size_t);
+  void    unalloc (void);
+  void    reset   (void);
+
+  size_t  size   (void) const;
+  size_t  avail  (void) const;
+  size_t  free   (void) const;
+
+  ssize_t write  (const unsigned char* data, size_t len);
+  ssize_t read   (unsigned char* data, size_t len);
+
+protected:
+  unsigned char * m_buffer;
+  size_t m_alloc;
+  size_t m_size;
+  size_t m_count;
+  size_t m_pin;
+  size_t m_pout;
+
+private:
+  mutable P8PLATFORM::CMutex m_mutex;
+
+};
diff --git a/src/HTSPVFS.cpp b/src/HTSPVFS.cpp
index 0404bab..a5e16b3 100644
--- a/src/HTSPVFS.cpp
+++ b/src/HTSPVFS.cpp
@@ -34,15 +34,53 @@ using namespace P8PLATFORM;
 using namespace tvheadend::utilities;
 
 /*
+* The buffer thread
+*/
+void *CHTSPVFS::Process(void)
+{
+  while (!IsStopped())
+  {
+    while (m_fileId && m_buffer.free() > 0)
+    {
+      if (!SendFileRead())
+        continue;
+
+      CLockObject lock(m_mutex);
+      m_bHasData = true;
+      m_condition.Broadcast();
+    }
+
+    {
+      // Take a break, we're either stopped or full
+      CLockObject lock(m_mutex);
+      m_condition.Wait(m_mutex, 5000);
+      if (!m_bHasData)
+        m_currentReadLength = MIN_READ_LENGTH;
+    }
+  }
+  return NULL;
+}
+
+
+/*
 * VFS handler
 */
 CHTSPVFS::CHTSPVFS ( CHTSPConnection &conn )
-  : m_conn(conn), m_path(""), m_fileId(0), m_offset(0)
+  : m_conn(conn), m_path(""), m_fileId(0), m_offset(0),
+  m_bHasData(false),
+  m_bSeekDone(true),
+  m_currentReadLength(MAX_READ_LENGTH)
 {
+  m_buffer.alloc(MAX_BUFFER_SIZE);
+
+  // Start the buffer thread
+  CreateThread();
 }
 
-CHTSPVFS::~CHTSPVFS ()
+CHTSPVFS::~CHTSPVFS ( void )
 {
+  // Stop the buffer thread
+  StopThread();
 }
 
 void CHTSPVFS::Connected ( void )
@@ -90,22 +128,44 @@ void CHTSPVFS::Close ( void )
   m_offset = 0;
   m_fileId = 0;
   m_path   = "";
+  Reset();
+}
+
+void CHTSPVFS::Reset()
+{
+  CLockObject lock(m_mutex);
+  m_buffer.reset();
+  m_bHasData = false;
+  m_bSeekDone = true;
+  m_currentReadLength = MIN_READ_LENGTH;
+  m_seekCondition.Signal();
 }
 
 ssize_t CHTSPVFS::Read ( unsigned char *buf, unsigned int len )
 {
+  ssize_t ret;
+  CLockObject lock(m_mutex);
   /* Not opened */
   if (!m_fileId)
     return -1;
 
-  /* Read */
-  ssize_t read = SendFileRead(buf, len);
+  m_seekCondition.Wait(m_mutex, m_bSeekDone, 5000);
 
-  /* Update */
-  if (read > 0)
-    m_offset += read;
+  /* Signal that we need more data in the buffer. Reset the read length to the
+     requested length so we don't wait unnecessarily long */
+  if (m_buffer.avail() < len)
+  {
+    m_bHasData = false;
+    m_condition.Broadcast();
+  }
+
+  /* Wait for data */
+  m_condition.Wait(m_mutex, m_bHasData, 5000);
 
-  return read;
+  /* Read */
+  ret = m_buffer.read(buf, len);
+  m_offset += ret;
+  return ret;
 }
 
 long long CHTSPVFS::Seek ( long long pos, int whence )
@@ -113,6 +173,7 @@ long long CHTSPVFS::Seek ( long long pos, int whence )
   if (m_fileId == 0)
     return -1;
 
+  m_bSeekDone = false;
   return SendFileSeek(pos, whence);
 }
 
@@ -260,6 +321,7 @@ long long CHTSPVFS::SendFileSeek ( int64_t pos, int whence, bool force )
   {
     Logger::Log(LogLevel::LEVEL_TRACE, "vfs seek offset=%lld", (long long)ret);
     m_offset = ret;
+    Reset();
   }
 
   /* Cleanup */
@@ -268,19 +330,30 @@ long long CHTSPVFS::SendFileSeek ( int64_t pos, int whence, bool force )
   return ret;
 }
 
-ssize_t CHTSPVFS::SendFileRead(unsigned char *buf, unsigned int len)
+bool CHTSPVFS::SendFileRead()
 {
   htsmsg_t   *m;
-  const void *buffer;
-  ssize_t read;
+  const void *buf;
+  size_t      len;
+  size_t      readLength;
+
+  {
+    CLockObject lock(m_mutex);
+
+    /* Determine read length */
+    if (m_currentReadLength > m_buffer.free())
+      readLength = m_buffer.free();
+    else
+      readLength = m_currentReadLength;
+  }
 
   /* Build */
   m = htsmsg_create_map();
   htsmsg_add_u32(m, "id", m_fileId);
-  htsmsg_add_s64(m, "size", len);
+  htsmsg_add_s64(m, "size", readLength);
 
-  Logger::Log(LogLevel::LEVEL_TRACE, "vfs read id=%d size=%d",
-    m_fileId, len);
+  Logger::Log(LogLevel::LEVEL_TRACE, "vfs read id=%d size=%d",
+    m_fileId, readLength);
 
   /* Send */
   {
@@ -289,26 +362,33 @@ ssize_t CHTSPVFS::SendFileRead(unsigned char *buf, unsigned int len)
   }
 
   if (m == NULL)
-  {
-    Logger::Log(LogLevel::LEVEL_ERROR, "vfs fileRead failed");
-    return -1;
-  }
+    return false;
 
-  /* Get Data */
-  if (htsmsg_get_bin(m, "data", &buffer, reinterpret_cast<size_t *>(&read)))
+  /* Process */
+  if (htsmsg_get_bin(m, "data", &buf, &len))
   {
+    htsmsg_destroy(m);
     Logger::Log(LogLevel::LEVEL_ERROR, "malformed fileRead response: 'data' missing");
-    read = -1;
+    return false;
+  }
+
 
   /* Store */
+  if (m_buffer.write((unsigned char*)buf, len) != (ssize_t)len)
+  {
+    htsmsg_destroy(m);
+    Logger::Log(LogLevel::LEVEL_ERROR, "vfs partial buffer write");
+    return false;
   }
-  else
+
   {
-    memcpy(buf, buffer, read);
+    /* Gradually increase read length */
+    CLockObject lock(m_mutex);
+
+    if (m_currentReadLength * 2 <= MAX_READ_LENGTH)
+      m_currentReadLength *= 2;
   }
 
-  /* Cleanup */
   htsmsg_destroy(m);
-
-  return read;
+  return true;
 }
diff --git a/src/Tvheadend.h b/src/Tvheadend.h
index 88d7d4d..80b5746 100644
--- a/src/Tvheadend.h
+++ b/src/Tvheadend.h
@@ -28,6 +28,7 @@
 #include "p8-platform/util/buffer.h"
 #include "xbmc_codec_types.h"
 #include "libXBMC_addon.h"
+#include "CircBuffer.h"
 #include "tvheadend/Settings.h"
 #include "HTSPTypes.h"
 #include "tvheadend/ChannelTuningPredictor.h"
@@ -306,6 +307,7 @@ private:
  * HTSP VFS - recordings
  */
 class CHTSPVFS 
+  : public P8PLATFORM::CThread
 {
   friend class CTvheadend;
 
@@ -321,17 +323,30 @@ private:
   uint32_t        m_fileId;
   int64_t         m_offset;
 
+  CCircBuffer                  m_buffer;
+  P8PLATFORM::CMutex             m_mutex;
+  bool                         m_bHasData;
+  bool                         m_bSeekDone;
+  P8PLATFORM::CCondition<bool>   m_condition;
+  P8PLATFORM::CCondition<bool>   m_seekCondition;
+  size_t                       m_currentReadLength;
   bool      Open   ( const PVR_RECORDING &rec );
   void      Close  ( void );
   ssize_t   Read   ( unsigned char *buf, unsigned int len );
   long long Seek   ( long long pos, int whence );
   long long Tell   ( void );
   long long Size   ( void );
+  void      Reset  ( void );
+
+  void *Process();
 
   bool      SendFileOpen  ( bool force = false );
   void      SendFileClose ( void );
-  ssize_t   SendFileRead  ( unsigned char *buf, unsigned int len );
+  bool      SendFileRead  ( void );
   long long SendFileSeek  ( int64_t pos, int whence, bool force = false );
+  static const int MAX_BUFFER_SIZE = 1024 * 1024 * 10;  // 10 MB
+  static const int MIN_READ_LENGTH = 1024 * 128;        // 128 KB
+  static const int MAX_READ_LENGTH = 1024 * 1024 * 2;   // 2 MB
 };
 
 /*
-- 
1.9.1

